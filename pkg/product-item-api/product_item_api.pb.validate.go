// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: passsquale/product_item_api/v1/product_item_api.proto

package product_item_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on MaybeTimestamp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MaybeTimestamp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaybeTimestampValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MaybeTimestampValidationError is the validation error returned by
// MaybeTimestamp.Validate if the designated constraints aren't met.
type MaybeTimestampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaybeTimestampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaybeTimestampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaybeTimestampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaybeTimestampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaybeTimestampValidationError) ErrorName() string { return "MaybeTimestampValidationError" }

// Error satisfies the builtin error interface
func (e MaybeTimestampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaybeTimestamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaybeTimestampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaybeTimestampValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Item) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for OwnerID

	// no validation rules for ProductID

	// no validation rules for Title

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on DescribeItemV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeItemV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetItemID() <= 0 {
		return DescribeItemV1RequestValidationError{
			field:  "ItemID",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeItemV1RequestValidationError is the validation error returned by
// DescribeItemV1Request.Validate if the designated constraints aren't met.
type DescribeItemV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeItemV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeItemV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeItemV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeItemV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeItemV1RequestValidationError) ErrorName() string {
	return "DescribeItemV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeItemV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeItemV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeItemV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeItemV1RequestValidationError{}

// Validate checks the field values on DescribeItemV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeItemV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeItemV1ResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeItemV1ResponseValidationError is the validation error returned by
// DescribeItemV1Response.Validate if the designated constraints aren't met.
type DescribeItemV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeItemV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeItemV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeItemV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeItemV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeItemV1ResponseValidationError) ErrorName() string {
	return "DescribeItemV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeItemV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeItemV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeItemV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeItemV1ResponseValidationError{}
